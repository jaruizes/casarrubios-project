---
services:
  ### INFRASTRUCTURE SERVICES ###

  postgresql:
    image: postgres:14
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=applications
    volumes:
      - "./postgresql/inventory.sql:/docker-entrypoint-initdb.d/1.sql"
      - "./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 30s
      timeout: 10s
      retries: 5

  broker:
    image: confluentinc/cp-server:7.5.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8001:8001"
    depends_on:
      zookeeper:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      SERVER_PORT: 8001
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:29092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
      KAFKA_CLUSTERS_0_NAME: local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-init:
    image: confluentinc/cp-server:7.5.0
    depends_on:
      broker:
        condition: service_healthy
    command: >
      bash -c '
        echo "Esperando a que Kafka est√© listo..."
        cub kafka-ready -b broker:29092 1 30
        echo "Creando topic recruiters.applications-scored..."
        kafka-topics --create --if-not-exists \
          --bootstrap-server broker:29092 \
          --partitions 1 \
          --replication-factor 1 \
          --config retention.ms=604800000 \
          --topic recruiters.applications-scored
        echo "Topic creado correctamente"
      '

  recruitment-applications-service:
    image: "recruitment/applications-service:1.0.0"
    container_name: recruitment.applications-service
    ports:
      - "8000:${PORT:-8000}"
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=applications
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_SCHEMA=recruiters
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - KAFKA_INPUT_TOPIC=recruiters.applications-scored
      - KAFKA_CONSUMER_GROUP=applications-service
      - KAFKA_CONSUMER_OFFSET_RESET=earliest
      - LOG_LEVEL=INFO
      - PORT=8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-8000}/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped