---
services:
  ### INFRASTRUCTURE SERVICES ###

  postgresql:
    image: postgres:14
    container_name: infrastructure.postgresql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=applications
    volumes:
      - "./postgresql/inventory.sql:/docker-entrypoint-initdb.d/1.sql"
      - "./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf"

  qdrant:
    image: qdrant/qdrant:v1.13.6
    container_name: infrastructure.qdrant
    ports:
      - "6333:6333"
      - "6334:6334"

  minio:
    image: quay.io/minio/minio
    container_name: infrastructure.minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: infrastructure.zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 30s
      timeout: 10s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker
    container_name: infrastructure.broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server broker:29092 --list > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: infrastructure.kafka-ui
    ports:
      - 8001:8001
    depends_on:
      broker:
        condition: service_healthy
    environment:
      SERVER_PORT: 8001
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:29092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8081"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8001" ]
      interval: 30s
      timeout: 10s
      retries: 5

  cdc-service:
    image: ghcr.io/jaruizes/infrastructure/cdc-service:1.0.0
    container_name: infrastructure.cdc-service
    ports:
      - 8083:8083
    depends_on:
      broker:
        condition: service_healthy
    environment:
      - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
      - KAFKA_CONNECT_BOOTSTRAP_SERVERS=broker:29092
      - |
        KAFKA_CONNECT_CONFIGURATION=
        key.converter=org.apache.kafka.connect.storage.StringConverter
        value.converter=org.apache.kafka.connect.json.JsonConverter
        key.converter.schemas.enable=false
        value.converter.schemas.enable=false
        group.id=debezium-connect
        offset.storage.topic=connect-offsets
        offset.storage.replication.factor=1
        config.storage.topic=connect-configs
        config.storage.replication.factor=1
        status.storage.topic=connect-status
        status.storage.replication.factor=1
        producer.interceptor.classes=io.debezium.tracing.DebeziumTracingProducerInterceptor
      - OTEL_SERVICE_NAME=cdc-service
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_TRACES_SAMPLER=always_on
      - STRIMZI_TRACING=opentelemetry
    command: /opt/kafka/kafka_connect_run.sh
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8083" ]
      interval: 30s
      timeout: 10s
      retries: 10

  cdc-service-init:
    image: curlimages/curl:latest
    container_name: infrastructure.cdc-service-init
    depends_on:
      cdc-service:
        condition: service_healthy
    volumes:
      - ../../project/candidates/cdc/connectors/applications-cdc-postgresql-connector.json:/connectors/applications-cdc-postgresql-connector.json
      - ../../project/recruitment/cdc/connectors/recruiters-positions-cdc-connector.json:/connectors/recruiters-positions-cdc-connector.json
      - ../../project/recruitment/cdc/connectors/recruiters-new-applications-outbox-connector.json:/connectors/recruiters-new-applications-outbox-connector.json
      - ./cdc/register-connectors.sh:/register-connectors.sh
    entrypoint: [ "sh", "/register-connectors.sh" ]

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: infrastructure.kafka-init
    depends_on:
      broker:
        condition: service_healthy
    volumes:
      - ./kafka/init-topics.sh:/init-topics.sh
      - ./kafka/topics-to-create.txt:/topics-to-create.txt
    command: bash /init-topics.sh

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: infrastructure.otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:Z
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "13133:13133"  # Health check/debug
    depends_on:
      - jaeger

  jaeger:
    image: jaegertracing/jaeger:2.4.0
    container_name: infrastructure.jaeger
    ports:
      - "16686:16686"
    environment:
      - LOG_LEVEL=debug


  ### -------------------------------------------------------------- ###
  ### "CANDIDATE SIDE" SERVICES ###
  applications-applications-app:
    image: "ghcr.io/jaruizes/applications/applications-app:1.0.0"
    pull_policy: always
    container_name: applications.applications-app
    ports:
      - "8081:8081"
    environment:
      - POSITIONS=http://localhost:3000/positions,
      - APPLICATIONS=http://localhost:3000/applications

  applications-applications-bff:
    image: "ghcr.io/jaruizes/applications/applications-bff:1.0.0"
    pull_policy: always
    container_name: applications.applications-bff
    ports:
      - "3000:3000"
    depends_on:
      - applications-positions-service
      - applications-manager-service
    environment:
      - BACKEND_URL=http://applications-positions-service:8080
      - APPLICATIONS_BACKEND_URL=http://applications-manager-service:8090
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - PORT=3000

  applications-positions-service:
    image: "ghcr.io/jaruizes/applications/positions-service:1.0.0"
    pull_policy: always
    container_name: applications.positions-service
    ports:
      - "8080:8080"
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
    volumes:
      - ./otel/java-agent/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/applications
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=applications
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - NEW-POSITIONS-PUBLISHED_TOPIC=recruitment.new-positions-published
      - SPRING_KAFKA_CONSUMER_GROUP-ID=positions-service
      - JAVA_TOOL_OPTIONS="-javaagent:/otel/opentelemetry-javaagent.jar"
      - OTEL_SERVICE_NAME=applications-positions-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none

  applications-manager-service:
    image: "ghcr.io/jaruizes/applications/applications-manager-service:1.0.0"
    pull_policy: always
    container_name: applications.manager-service
    ports:
      - "8090:8090"
    depends_on:
      postgresql:
        condition: service_started
      minio:
        condition: service_healthy
    environment:
      - SERVER_PORT=8090
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/applications
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=applications
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_NAME=minioadmin
      - MINIO_ACCESS_SECRET=minioadmin
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=applications-manager-service
      - OTEL_METRICS_EXPORTER=none

### -------------------------------------------------------------- ###
### "RECRUITERS SIDE" SERVICES ###
  recruitment-recruitment-app:
    image: "ghcr.io/jaruizes/recruitment/recruitment-app:1.0.0"
    pull_policy: always
    container_name: recruitment.recruitment-app
    ports:
      - "9070:9070"
    environment:
      - NOTIFICATIONS=http://localhost:4000
      - APPLICATIONS=http://localhost:4000/applications
      - POSITIONS=http://localhost:4000/positions
      - GLOBAL_POSITION=http://localhost:4000/global-position

  recruitment-recruitment-bff:
    image: "ghcr.io/jaruizes/recruitment/recruitment-bff:1.0.0"
    pull_policy: always
    container_name: recruitment.recruitment-bff
    ports:
      - "4000:4000"
    depends_on:
      broker:
        condition: service_healthy
      recruitment-positions-service:
        condition: service_started
      recruitment-applications-service:
        condition: service_started
      recruitment-global-position-service:
        condition: service_started
    environment:
      - POSITIONS_SERVICE_URL=http://recruitment-positions-service:9080
      - GLOBAL_POSITION_SERVICE_URL=http://recruitment-global-position-service:9090
      - APPLICATIONS_SERVICE_URL=http://recruitment-applications-service:9081
      - PORT=4000
      - KAFKA_BROKERS=broker:29092
      - KAFKA_NOTIFICATION_TOPIC=recruitment.notifications
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318

  recruitment-positions-service:
    image: "ghcr.io/jaruizes/recruitment/positions-manager-service:1.0.0"
    pull_policy: always
    container_name: recruitment.positions-manager-service
    ports:
      - "9080:9080"
    depends_on:
      postgresql:
        condition: service_started
    environment:
      - QUARKUS_HTTP_PORT=9080
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgresql:5432/applications
      - QUARKUS_DATASOURCE_USERNAME=postgres
      - QUARKUS_DATASOURCE_PASSWORD=postgres
      - QUARKUS_HIBERNATE-ORM_DATABASE_DEFAULT_SCHEMA=recruiters
      - QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
      - QUARKUS_LOG_CONSOLE_FORMAT=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

  recruitment-positions-publisher-service:
    image: "ghcr.io/jaruizes/recruitment/new-positions-publisher-service:1.0.0"
    pull_policy: always
    container_name: recruitment.new-positions-publisher-service
    depends_on:
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    volumes:
      - ./otel/java-agent/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    environment:
      - QUARKUS_KAFKA-STREAMS_BOOTSTRAP-SERVERS=broker:29092
      - CDC_RECRUITERS_POSITIONS_TOPIC=cdc.recruiters.positions
      - CDC_RECRUITERS_POSITIONS-REQUIREMENTS_TOPIC=cdc.recruiters.requirements
      - CDC_RECRUITERS_POSITIONS-BENEFITS_TOPIC=cdc.recruiters.benefits
      - CDC_RECRUITERS_POSITIONS-TASK_TOPIC=cdc.recruiters.tasks
      - RECRUITERS_NEW-POSITIONS-PUBLISHED_TOPIC=recruitment.new-positions-published
      - QUARKUS.KAFKA-STREAMS.TOPICS=cdc.recruiters.positions,cdc.recruiters.requirements,cdc.recruiters.benefits,cdc.recruiters.tasks
      - QUARKUS_KAFKA-STREAMS_APPLICATION-ID=recruitment-positions-publisher-service
      - QUARKUS_LOG_CONSOLE_FORMAT=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
      - JAVA_TOOL_OPTIONS="-javaagent:/otel/opentelemetry-javaagent.jar"
      - OTEL_SERVICE_NAME=recruitment-positions-publisher-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none

  recruitment-applications-updater-service:
    image: "ghcr.io/jaruizes/recruitment/applications-updater-service:1.0.0"
    pull_policy: always
    container_name: recruitment.applications-updater-service
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgresql:5432/applications
      - QUARKUS_DATASOURCE_USERNAME=postgres
      - QUARKUS_DATASOURCE_PASSWORD=postgres
      - QUARKUS_HIBERNATE-ORM_DATABASE_DEFAULT_SCHEMA=recruiters
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - MP_MESSAGING_INCOMING_CDC-APPLICATIONS_TOPIC=cdc.applications.applications
      - QUARKUS_LOG_CONSOLE_FORMAT=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
      - QUARKUS_OTEL_ENABLED=true
      - QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
      - QUARKUS_OTEL_SERVICE_NAME=recruitment-applications-updater-service
      - QUARKUS_APPLICATION_NAME=recruitment-applications-updater-service
      - QUARKUS_DATASOURCE_JDBC_TELEMETRY=true

  recruitment-applications-service:
    image: "ghcr.io/jaruizes/recruitment/applications-service:1.0.0"
    pull_policy: always
    container_name: recruitment.applications-service
    ports:
      - "9081:9081"
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=applications
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_SCHEMA=recruiters
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - KAFKA_INPUT_TOPIC=recruitment.applications-scored
      - KAFKA_CONSUMER_GROUP=applications-service
      - KAFKA_CONSUMER_OFFSET_RESET=earliest
      - LOG_LEVEL=INFO
      - PORT=9081
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_NAME=minioadmin
      - MINIO_ACCESS_SECRET=minioadmin
      - MINIO_BUCKET_NAME=resumes
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - TRACING_ENABLED=true
    restart: unless-stopped

  recruitment-applications-analyzer-service:
    image: "ghcr.io/jaruizes/recruitment/applications-analyzer-service:1.0.0"
    pull_policy: always
    container_name: recruitment.applications-analyzer-service
    ports:
      - "9082:9082"
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - SERVER_PORT=9082
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/applications
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=applications
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_NAME=minioadmin
      - MINIO_ACCESS_SECRET=minioadmin
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - SPRING_AI_OPENAI_API_KEY=${OPENAI_API_KEY}
      - OTEL_SERVICE_NAME=recruitment-applications-analyzer-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_JAVAAGENT_ENABLED=true

  recruitment-scoring-service:
    image: "ghcr.io/jaruizes/recruitment/scoring-service:1.0.0"
    pull_policy: always
    container_name: recruitment.scoring-service
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=applications
      - DB_HOST=postgresql
      - DB_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - KAFKA_CONSUMER_GROUP=scoring-service
      - KAFKA_CONSUMER_OFFSET_RESET=earliest
      - KAFKA_INPUT_TOPIC=recruitment.applications-analyzed
      - KAFKA_OUTPUT_TOPIC=recruitment.applications-scored
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VECTOR_STORAGE_HOST=qdrant
      - VECTOR_STORAGE_PORT=6333
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - TRACING_ENABLED=true

  recruitment-global-position-service:
    image: "ghcr.io/jaruizes/recruitment/global-position-service:1.0.0"
    pull_policy: always
    container_name: recruitment.global-position-service
    ports:
      - "9090:9090"
    depends_on:
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    volumes:
      - ./otel/java-agent/opentelemetry-javaagent.jar:/otel/opentelemetry-javaagent.jar
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - QUARKUS.KAFKA-STREAMS.TOPICS=recruitment.new-positions-published,recruitment.applications-received,recruitment.applications-scored
      - QUARKUS_KAFKA-STREAMS_APPLICATION-ID=recruitment-global-position-service
      - NEW-POSITIONS_TOPIC=recruitment.new-positions-published
      - NEW-APPLICATIONS_TOPIC=recruitment.applications-received
      - SCORING_TOPIC=recruitment.applications-scored
      - QUARKUS_HTTP_PORT=9090
      - JAVA_TOOL_OPTIONS="-javaagent:/otel/opentelemetry-javaagent.jar"
      - OTEL_SERVICE_NAME=recruitment-global-position-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - QUARKUS_LOG_CONSOLE_FORMAT=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

  recruitment-notifications-manager-service:
    image: "ghcr.io/jaruizes/recruitment/notifications-manager-service:1.0.0"
    pull_policy: always
    container_name: recruitment.notifications-manager-service
    depends_on:
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - MP_MESSAGING_OUTGOING_NOTIFICATIONS-PUBLISHER_TOPIC=recruitment.notifications
      - MP_MESSAGING_INCOMING_APPLICATION-SCORED_TOPIC=recruitment.applications-scored
      - MP_MESSAGING_INCOMING_APPLICATION-SCORED_GROUP_ID=notifications-manager-service
      - QUARKUS_LOG_CONSOLE_FORMAT=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
      - QUARKUS_OTEL_ENABLED=true
      - QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
      - QUARKUS_OTEL_SERVICE_NAME=recruitment-notifications-manager-service
      - QUARKUS_APPLICATION_NAME=recruitment-applications-updater-service

volumes:
  minio_data:

networks:
  my_network:
    driver: bridge
