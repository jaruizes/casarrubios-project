---
services:
  ### INFRASTRUCTURE SERVICES ###

  postgresql:
    image: postgres:14
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=applications
    volumes:
      - "./postgresql/inventory.sql:/docker-entrypoint-initdb.d/1.sql"
      - "./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf"
  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      EXTRA_ARGS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/zookeeper.yml
    volumes:
      - ./jmx-exporter:/usr/share/jmx_exporter/
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 30s
      timeout: 10s
      retries: 5

  broker:
    image: confluentinc/cp-server:7.5.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
#      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/kafka-broker.yml
    volumes:
      - ./jmx-exporter:/usr/share/jmx_exporter/
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8001:8001
    depends_on:
      zookeeper:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      SERVER_PORT: 8001
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:29092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8081"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9081" ]
      interval: 30s
      timeout: 10s
      retries: 5

  cdc-service:
    image: quay.io/debezium/connect:3.0
    hostname: connect
    container_name: cdc-service
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: 'broker:29092'
      ADVERTISED_HOST_NAME: connect
      GROUP_ID: debezium-connect-group
      CONFIG_STORAGE_TOPIC: dbz-connect-configs
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_FLUSH_INTERVAL_MS: 10000
      OFFSET_STORAGE_TOPIC: dbz-connect-offsets
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_TOPIC: docker-connect-status
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8083" ]
      interval: 30s
      timeout: 10s
      retries: 5


  ### -------------------------------------------------------------- ###
  ### "CANDIDATE SIDE" SERVICES ###
  applications-applications-app:
    image: "applications/applications-app:1.0.0"
    container_name: applications.applications-app
    ports:
      - "8081:8081"

  applications-applications-bff:
    image: "applications/applications-bff:1.0.0"
    container_name: applications.applications-bff
    ports:
      - "3000:3000"
    environment:
      - BACKEND_URL=http://applications-positions-service:8080
      - APPLICATIONS_BACKEND_URL=http://applications-manager-service:8090

  applications-positions-service:
    image: "applications/positions-service:1.0.0"
    container_name: applications.positions-service
    ports:
      - "8080:8080"
    depends_on:
      postgresql:
        condition: service_started

    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/applications
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=applications
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - NEW-POSITIONS-PUBLISHED_TOPIC=recruiters.new-positions-published
      - SPRING_KAFKA_CONSUMER_GROUP-ID=positions-service44

  applications-manager-service:
    image: "applications/applications-manager-service:1.0.0"
    container_name: applications.manager-service
    ports:
      - "8090:8090"
    depends_on:
      postgresql:
        condition: service_started
      minio:
        condition: service_healthy
    environment:
      - SERVER_PORT=8090
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/applications
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=applications
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_NAME=minioadmin
      - MINIO_ACCESS_SECRET=minioadmin

### -------------------------------------------------------------- ###
### "RECRUITERS SIDE" SERVICES ###
  recruitment-recruitment-app:
    image: "recruitment/recruitment-app:1.0.0"
    container_name: recruitment.recruitment-app
    ports:
      - "9070:9070"

  recruitment-recruitment-bff:
    image: "recruitment/recruitment-bff:1.0.0"
    container_name: recruitment.recruitment-bff
    ports:
      - "4000:4000"
    environment:
      - POSITIONS_SERVICE_URL=http://recruitment-positions-service:9080
      - APPLICATIONS_SERVICE_URL=http://recruitment-applications-service:9081
      - PORT=4000

  recruitment-positions-service:
    image: "recruitment/positions-manager-service:1.0.0"
    container_name: recruitment.positions-manager-service
    ports:
      - "9080:9080"
    depends_on:
      postgresql:
        condition: service_started
    environment:
      - QUARKUS_HTTP_PORT=9080
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgresql:5432/applications
      - QUARKUS_DATASOURCE_USERNAME=postgres
      - QUARKUS_DATASOURCE_PASSWORD=postgres
      - QUARKUS_HIBERNATE-ORM_DATABASE_DEFAULT_SCHEMA=recruiters

  recruitment-positions-publisher-service:
    image: "recruitment/new-positions-publisher-service:1.0.0"
    container_name: recruitment.new-positions-publisher-service
    depends_on:
      broker:
        condition: service_healthy
    environment:
      - QUARKUS_KAFKA-STREAMS_BOOTSTRAP-SERVERS=broker:29092
      - CDC_RECRUITERS_POSITIONS_TOPIC=cdc.recruiters.positions
      - CDC_RECRUITERS_POSITIONS-REQUIREMENTS_TOPIC=cdc.recruiters.requirements
      - CDC_RECRUITERS_POSITIONS-BENEFITS_TOPIC=cdc.recruiters.benefits
      - CDC_RECRUITERS_POSITIONS-TASK_TOPIC=cdc.recruiters.tasks
      - RECRUITERS_NEW-POSITIONS-PUBLISHED_TOPIC=recruiters.new-positions-published
      - QUARKUS.KAFKA-STREAMS.TOPICS=cdc.recruiters.positions,cdc.recruiters.requirements,cdc.recruiters.benefits,cdc.recruiters.tasks
      - QUARKUS_KAFKA-STREAMS_APPLICATION-ID=quarkus-kafka-streams2

  recruitment-applications-updater-service:
    image: "recruitment/applications-updater-service:1.0.0"
    container_name: recruitment.applications-updater-service
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgresql:5432/applications
      - QUARKUS_DATASOURCE_USERNAME=postgres
      - QUARKUS_DATASOURCE_PASSWORD=postgres
      - QUARKUS_HIBERNATE-ORM_DATABASE_DEFAULT_SCHEMA=recruiters
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - MP_MESSAGING_INCOMING_CDC-APPLICATIONS_TOPIC=cdc.applications.applications

  kafka-init:
    image: confluentinc/cp-server:7.5.0
    depends_on:
      broker:
        condition: service_healthy
    command: >
      bash -c '
        echo "Esperando a que Kafka est√© listo..."
        cub kafka-ready -b broker:29092 1 30
        echo "Creando topic recruitment.applications-received..."
        kafka-topics --create --if-not-exists \
          --bootstrap-server broker:29092 \
          --partitions 1 \
          --replication-factor 1 \
          --config retention.ms=604800000 \
          --topic recruitment.applications-received
        echo "Creando topic recruitment.applications-analyzed..."
        kafka-topics --create --if-not-exists \
          --bootstrap-server broker:29092 \
          --partitions 1 \
          --replication-factor 1 \
          --config retention.ms=604800000 \
          --topic recruitment.applications-analyzed
        echo "Topic creado correctamente"
        echo "Creando topic recruitment.applications-scored..."
                kafka-topics --create --if-not-exists \
                  --bootstrap-server broker:29092 \
                  --partitions 1 \
                  --replication-factor 1 \
                  --config retention.ms=604800000 \
                  --topic recruitment.applications-scored
                echo "Topic creado correctamente"
        echo "Creando topic recruiters.new-positions-published..."
                kafka-topics --create --if-not-exists \
                  --bootstrap-server broker:29092 \
                  --partitions 1 \
                  --replication-factor 1 \
                  --config retention.ms=604800000 \
                  --topic recruiters.new-positions-published
                echo "Topic creado correctamente"
      '

  recruitment-applications-service:
    image: "recruitment/applications-service:1.0.0"
    container_name: recruitment.applications-service
    ports:
      - "9081:9081"
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=applications
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_SCHEMA=recruiters
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - KAFKA_INPUT_TOPIC=recruitment.applications-scored
      - KAFKA_CONSUMER_GROUP=applications-service
      - KAFKA_CONSUMER_OFFSET_RESET=earliest
      - LOG_LEVEL=INFO
      - PORT=9081
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_NAME=minioadmin
      - MINIO_ACCESS_SECRET=minioadmin
      - MINIO_BUCKET_NAME=resumes
    restart: unless-stopped

  recruitment-applications-analyzer-service:
    image: "recruitment/applications-analyzer-service:1.0.0"
    container_name: recruitment.applications-analyzer-service
    ports:
      - "9082:9082"
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - SERVER_PORT=9082
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/applications
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=applications
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_NAME=minioadmin
      - MINIO_ACCESS_SECRET=minioadmin
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - SPRING_AI_OPENAI_API_KEY=${OPENAI_API_KEY}

  recruitment-scoring-service:
    image: "recruitment/scoring-service:1.0.0"
    container_name: recruitment.scoring-service
    depends_on:
      postgresql:
        condition: service_started
      broker:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=applications
      - DB_HOST=postgresql
      - DB_PORT=5432
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - KAFKA_CONSUMER_GROUP=scoring-service
      - KAFKA_CONSUMER_OFFSET_RESET=earliest
      - KAFKA_INPUT_TOPIC=recruitment.applications-analyzed
      - KAFKA_OUTPUT_TOPIC=recruitment.applications-scored
      - OPENAI_API_KEY=${OPENAI_API_KEY}

#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    ports:
#      - 9081:9081
#    depends_on:
#      zookeeper:
#        condition: service_healthy
#      broker:
#        condition: service_healthy
#      schema-registry:
#        condition: service_healthy
#    environment:
#      SERVER_PORT: 9081
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:29092"
#      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://schema-registry:8081"
#    healthcheck:
#      test: [ "CMD", "nc", "-z", "localhost", "9081" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#
#  schema-registry:
#    image: confluentinc/cp-schema-registry:7.5.0
#    hostname: schema-registry
#    container_name: schema-registry
#    depends_on:
#      broker:
#        condition: service_healthy
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#      SCHEMA_REGISTRY_JMX_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.20.0.jar=9200:/usr/share/jmx_exporter/schemaregistry.yml
#    volumes:
#      - ./jmx-exporter:/usr/share/jmx_exporter/
#    healthcheck:
#      test: [ "CMD", "nc", "-z", "localhost", "8081" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 40s
#

#
#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#    ports:
#      - "9090:9090"
#    depends_on:
#      broker:
#        condition: service_healthy
#    volumes:
#      - ./prometheus:/etc/prometheus
#      - prom_data:/prometheus
#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    depends_on:
#      broker:
#        condition: service_healthy
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    volumes:
#      - grafana_data:/var/lib/grafana
#      - ./grafana/provisioning/:/etc/grafana/provisioning/
#
#volumes:
#  grafana_data:
#  prom_data:



  #  connect:
  #    image: cnfldemos/cp-server-connect-datagen:0.6.2-7.5.0
  #    hostname: connect
  #    container_name: connect
  #    depends_on:
  #      - broker
  #      - schema-registry
  #    ports:
  #      - "8083:8083"
  #    environment:
  #      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
  #      CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #      CONNECT_GROUP_ID: compose-connect-group
  #      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
  #      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #      # CLASSPATH required due to CC-2422
  #      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.5.0.jar
  #      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  #  control-center:
  #    image: confluentinc/cp-enterprise-control-center:7.5.0
  #    hostname: control-center
  #    container_name: control-center
  #    depends_on:
  #      - broker
  #      - schema-registry
  #      - connect
  #      - ksqldb-server
  #    ports:
  #      - "9021:9021"
  #    environment:
  #      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
  #      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
  #      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
  #      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
  #      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #      CONTROL_CENTER_REPLICATION_FACTOR: 1
  #      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #      PORT: 9021

  #  ksqldb-server:
  #    image: confluentinc/cp-ksqldb-server:7.5.0
  #    hostname: ksqldb-server
  #    container_name: ksqldb-server
  #    depends_on:
  #      - broker
  #      - connect
  #    ports:
  #      - "8088:8088"
  #    environment:
  #      KSQL_CONFIG_DIR: "/etc/ksql"
  #      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
  #      KSQL_HOST_NAME: ksqldb-server
  #      KSQL_LISTENERS: "http://0.0.0.0:8088"
  #      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
  #      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
  #      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
  #      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
  #      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
  #
  #  ksqldb-cli:
  #    image: confluentinc/cp-ksqldb-cli:7.5.0
  #    container_name: ksqldb-cli
  #    depends_on:
  #      - broker
  #      - connect
  #      - ksqldb-server
  #    environment:
  #      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
  #    entrypoint: /bin/sh
  #    tty: true
  #
  #  ksql-datagen:
  #    image: confluentinc/ksqldb-examples:7.5.0
  #    hostname: ksql-datagen
  #    container_name: ksql-datagen
  #    depends_on:
  #      - ksqldb-server
  #      - broker
  #      - schema-registry
  #      - connect
  #    command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #                       cub kafka-ready -b broker:29092 1 40 && \
  #                       echo Waiting for Confluent Schema Registry to be ready... && \
  #                       cub sr-ready schema-registry 8081 40 && \
  #                       echo Waiting a few seconds for topic creation to finish... && \
  #                       sleep 11 && \
  #                       tail -f /dev/null'"
  #    environment:
  #      KSQL_CONFIG_DIR: "/etc/ksql"
  #      STREAMS_BOOTSTRAP_SERVERS: "broker:29092"
  #      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
  #      STREAMS_SCHEMA_REGISTRY_PORT: 8081
  #    volumes:
  #      - ./schemas:/usr/appuser/

  #  rest-proxy:
  #    image: confluentinc/cp-kafka-rest:7.5.0
  #    depends_on:
  #      - broker
  #      - schema-registry
  #    ports:
  #      - 8082:8082
  #    hostname: rest-proxy
  #    container_name: rest-proxy
  #    environment:
  #      KAFKA_REST_HOST_NAME: rest-proxy
  #      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
  #      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
  #      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
  #
  #  zoonavigator:
  #    image: elkozmon/zoonavigator:latest
  #    container_name: zoonavigator
  #    ports:
  #      - "7070:7070"
  #    depends_on:
  #      - broker
  #    environment:
  #      HTTP_PORT: 7070




#  kafka_manager:
#    image: hlebalbau/kafka-manager:latest
#    ports:
#      - "9000:9000"
#    depends_on:
#      - zookeeper
#      - broker
#    environment:
#      ZK_HOSTS: "zookeeper:2181"
#      APPLICATION_SECRET: "random-secret"
#    command: -Dpidfile.path=/dev/null

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#    ports:
#      - "9090:9090"
#    depends_on:
#      - broker
#    volumes:
#      - ./prometheus:/etc/prometheus
#      - prom_data:/prometheus
#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    ports:
#      - "3000:3000"
#    depends_on:
#      - prometheus
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    volumes:
#      - grafana_data:/var/lib/grafana
#      - ./grafana/provisioning/:/etc/grafana/provisioning/
#
#volumes:
#  grafana_data:
#  prom_data:

volumes:
  minio_data:

networks:
  my_network:
    driver: bridge
